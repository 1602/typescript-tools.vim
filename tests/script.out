node ../bin/tss.js test.ts
// stdout
"loaded PREFIX/test.ts, TSS listening.."
[{"file":"PREFIX/test.ts","start":{"line":3,"col":6},"end":{"line":4,"col":2},"text":"Expected identifier following dot"}]
"string"
"s2: string"
{"def":{"unitIndex":2,"minChar":14,"limChar":26,"kind":"variable","name":"s2","containerKind":"","containerName":"__GLO"},"file":"PREFIX/test.ts","min":[1,15],"lim":[2,13]}
{"maybeInaccurate":false,"isMemberCompletion":true,"entries":[{"name":"toString","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"charAt","type":"(pos: number) => string","kind":"method","kindModifiers":"declare,public"},{"name":"charCodeAt","type":"(index: number) => number","kind":"method","kindModifiers":"declare,public"},{"name":"concat","type":"(...strings: string[]) => string","kind":"method","kindModifiers":"declare,public"},{"name":"indexOf","type":"(searchString: string, position?: number) => number","kind":"method","kindModifiers":"declare,public"},{"name":"lastIndexOf","type":"(searchString: string, position?: number) => number","kind":"method","kindModifiers":"declare,public"},{"name":"localeCompare","type":"(that: string) => number","kind":"method","kindModifiers":"declare,public"},{"name":"match","type":"{ (regexp: string): string[]; (regexp: RegExp): string[]; }","kind":"method","kindModifiers":"declare,public"},{"name":"replace","type":"{ (searchValue: string, replaceValue: string): string; (searchValue: string, replaceValue: (substring: string, ...args: any[]) => string): string; (searchValue: RegExp, replaceValue: string): string; (searchValue: RegExp, replaceValue: (substring: string, ...args: any[]) => string): string; }","kind":"method","kindModifiers":"declare,public"},{"name":"search","type":"{ (regexp: string): number; (regexp: RegExp): number; }","kind":"method","kindModifiers":"declare,public"},{"name":"slice","type":"(start: number, end?: number) => string","kind":"method","kindModifiers":"declare,public"},{"name":"split","type":"{ (separator: string, limit?: number): string[]; (separator: RegExp, limit?: number): string[]; }","kind":"method","kindModifiers":"declare,public"},{"name":"substring","type":"(start: number, end?: number) => string","kind":"method","kindModifiers":"declare,public"},{"name":"toLowerCase","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"toLocaleLowerCase","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"toUpperCase","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"toLocaleUpperCase","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"trim","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"substr","type":"(from: number, length?: number) => string","kind":"method","kindModifiers":"declare,public"},{"name":"length","type":"number","kind":"property","kindModifiers":"public"}]}
"updated PREFIX/test.ts"
"dumped PREFIX/test.ts to script.dump"
{"maybeInaccurate":false,"isMemberCompletion":true,"entries":[{"name":"toString","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"charAt","type":"(pos: number) => string","kind":"method","kindModifiers":"declare,public"},{"name":"charCodeAt","type":"(index: number) => number","kind":"method","kindModifiers":"declare,public"},{"name":"concat","type":"(...strings: string[]) => string","kind":"method","kindModifiers":"declare,public"},{"name":"indexOf","type":"(searchString: string, position?: number) => number","kind":"method","kindModifiers":"declare,public"},{"name":"lastIndexOf","type":"(searchString: string, position?: number) => number","kind":"method","kindModifiers":"declare,public"},{"name":"localeCompare","type":"(that: string) => number","kind":"method","kindModifiers":"declare,public"},{"name":"match","type":"{ (regexp: string): string[]; (regexp: RegExp): string[]; }","kind":"method","kindModifiers":"declare,public"},{"name":"replace","type":"{ (searchValue: string, replaceValue: string): string; (searchValue: string, replaceValue: (substring: string, ...args: any[]) => string): string; (searchValue: RegExp, replaceValue: string): string; (searchValue: RegExp, replaceValue: (substring: string, ...args: any[]) => string): string; }","kind":"method","kindModifiers":"declare,public"},{"name":"search","type":"{ (regexp: string): number; (regexp: RegExp): number; }","kind":"method","kindModifiers":"declare,public"},{"name":"slice","type":"(start: number, end?: number) => string","kind":"method","kindModifiers":"declare,public"},{"name":"split","type":"{ (separator: string, limit?: number): string[]; (separator: RegExp, limit?: number): string[]; }","kind":"method","kindModifiers":"declare,public"},{"name":"substring","type":"(start: number, end?: number) => string","kind":"method","kindModifiers":"declare,public"},{"name":"toLowerCase","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"toLocaleLowerCase","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"toUpperCase","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"toLocaleUpperCase","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"trim","type":"() => string","kind":"method","kindModifiers":"declare,public"},{"name":"substr","type":"(from: number, length?: number) => string","kind":"method","kindModifiers":"declare,public"},{"name":"length","type":"number","kind":"property","kindModifiers":"public"}]}
"TSS closing"

// stderr

